<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
        
     
     <!-- 打开spring的Annotation支持 -->
     <context:annotation-config/>
     
     <!-- 设定spring去哪些包中找Annotation -->
      <context:component-scan base-package="com.baoju"/> 
	
	 <!--加载service,此时要排除要controller,因为controller已经spring-mvc中加载过了 ,将Controller的注解排除掉 --> 
	 <context:component-scan base-package="com.baoju">
	  	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	 </context:component-scan>
 
   
     
     <!-- 导入Src目录下的jdbc.properties文件 -->
     <context:property-placeholder location="classpath:config/properties/jdbc.properties"/>
     
     <!-- 配置数据源连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
	    <property name="driverClassName" value="${jdbc.driverClassName}" />
	    <property name="url" value="${jdbc.url}" />
	    <property name="username" value="${jdbc.username}" />
	    <property name="password" value="${jdbc.password}" />
		<property name="initialSize" value="0" /><!-- 初始化连接大小 -->
	    <property name="maxActive" value="${jdbc.maxActive}" /><!-- 连接池最大使用连接数量 -->
	    <property name="maxIdle" value="${jdbc.maxIdle}" /><!-- 连接池最大空闲 -->
	    <property name="maxWait" value="${jdbc.maxWait}" /><!-- 获取连接最大等待时间 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" /> <!-- 配置 间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" /><!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        

	    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
	    <property name="poolPreparedStatements" value="true" />
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

	    <property name="removeAbandoned" value="${jdbc.removeAbandoned}" /><!-- 是否自动回收超时连接 -->
	    <property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" /><!--设置被遗弃的连接的超时的时间 1800秒，也就是30分钟 -->
	    <property name="logAbandoned" value="${jdbc.logAbandoned}" /><!-- 是否在自动回收超时连接的时候打印连接的超时错误 -->
	    <property name="validationQuery" value="${jdbc.validationQuery}" /><!-- 给出一条简单的sql语句进行验证  -->
	    <property name="testWhileIdle" value="true" />
        <property name="testOnReturn" value="false" />
	    <property name="testOnBorrow" value="${jdbc.testOnBorrow}" /><!-- 在取出连接时进行有效验证-->
	    
        <property name="filters" value="stat" /><!-- 开启Druid的监控统计功能 -->
	</bean>
	
	<!-- 创建spring的sessionFactory工厂 -->
	<!-- 如果使用的是Annotation的方式，不能使用LocalSessionFactoryBean，而应该使用 org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean -->
	<bean id="sessionFactory"
	     class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean"  ><!-- "org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean" -->
	     
	     <!-- 注入数据源 -->
	     <property name="dataSource" ref="dataSource"/>
	     <property name="hibernateProperties">
	 	     <props>
	 	         <prop key="hibernate.dialect">${hibernate.dialect}</prop>
	 	         <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
	 	         <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
	 	         <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
	 	         <prop key="javax.persistence.validation.mode">none</prop> <!-- 默认auto -->
	 	     </props>
	 	 </property>
	 	  <!-- 扫描 实体类-->
	 	   <property name="packagesToScan" value="com.baoju.*.entity"></property>
	</bean>
	
	<!-- 开启hibernateTemplate,并注入SessionFactory 使用HibernateTemplate不太方便的就是要获取session得通过getSessionFactory()方法获取-->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<!--      配置spring事务       -->
	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
	   	<property name="sessionFactory" ref="sessionFactory"/>
	   	<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 配置哪些方法要加入事务控制   定义通知拦截方法-->
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
	    <tx:attributes>
			<tx:method name="*" read-only="true" />
			<tx:method name="add*" propagation="REQUIRED"/>
			<tx:method name="upd*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED"/> 
			<tx:method name="del*" propagation="REQUIRED"/>
			<tx:method name="executeUpdate*" propagation="REQUIRED"/>
	    </tx:attributes>
	</tx:advice> 
	
	<!-- 配置AOP -->
	 <aop:config>
	  <!--   事务是声明在DAO中，但是通常都会在Service来处理多个业务对象逻辑的关系，注入删除，更新等，此时如果在执行了一个步骤之后抛出异常
		就会导致数据不完整，所以事务不应该在DAO层处理，而应该在service，这也就是Spring所提供的一个非常方便的工具，声明式事务 -->
	     <aop:pointcut id="allMethods" expression="execution(* com.baoju.*.service.impl.*.*(..))" />
	     <aop:advisor advice-ref="txAdvice" pointcut-ref="allMethods"/>
	</aop:config>
	
	
</beans>
	